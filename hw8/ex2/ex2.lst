     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, fopen, fclose, fread, printf, fprintf, fwrite
     6                                  import exit msvcrt.dll 
     7                                  import fopen msvcrt.dll 
     8                                  import fread msvcrt.dll 
     9                                  import fclose msvcrt.dll 
    10                                  import printf msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fwrite msvcrt.dll
    13                                  
    14                                  ; our data is declared here 
    15                                  segment data use32 class=data
    16 00000000 696E7075742E747874-     file_name db "input.txt", 0   ; 
    16 00000009 00                 
    17 0000000A 6100                        access_mode db "a", 0       
    18 0000000C FFFFFFFF                    file_descriptor dd -1      
    19 00000010 00000000                min dd 0
    20 00000014 696E7075742E747874-         nume_fisier db "input.txt", 0 
    20 0000001D 00                 
    21 0000001E 7200                        mod_acces db "r", 0             
    22 00000020 FFFFFFFF                    descriptor_fis dd -1     
    23 00000024 00000000                    nr_car_citite dd 0              
    24                                      len equ 1        
    25 00000028 01                          one db 1    ;
    26 00000029 0A                          ten db 10
    27 0000002A 64                          hundred db 100
    28 0000002B 6D696E203D20256420-         formatmin db "min = %d ", 0
    28 00000034 00                 
    29 00000035 6E203D2025642000            format db "n = %d ", 0
    30 0000003D 206D696E203D2000            newline db " min = ", 0
    31 00000045 00                          text db "", 0
    32 00000046 <res 00000001>              buffer resb len                 
    33                                  
    34                                  
    35                                  ; our code starts here
    36                                  segment code use32 class=code
    37                                      start:
    38                                          ; open file reading mode
    39 00000000 68[1E000000]                    push dword mod_acces
    40 00000005 68[14000000]                    push dword nume_fisier
    41 0000000A FF15[00000000]                  call [fopen]
    42 00000010 83C408                          add esp, 4*2
    43                                          ; if error jump to end
    44 00000013 83F800                          cmp eax, 0                  
    45 00000016 0F8457010000                    je final
    46                                          
    47 0000001C A3[20000000]                    mov [descriptor_fis], eax  
    48 00000021 BBA0860100                      mov ebx, 100000 ; ebx will hold the minimum
    49 00000026 BA00000000                      mov edx, 0 ; edx will be the actual number read
    50                                          bucla:
    51                                  
    52 0000002B 52                                  push edx ; save edx
    53                                              ; read first char in file
    54 0000002C FF35[20000000]                      push dword [descriptor_fis] 
    55 00000032 6A01                                push dword len
    56 00000034 6A01                                push dword 1
    57 00000036 68[46000000]                        push dword buffer
    58 0000003B FF15[00000000]                      call [fread]
    59 00000041 83C410                              add esp, 4*4
    60                                              
    61 00000044 5A                                  pop edx ; retrieve edx
    62 00000045 83F800                              cmp eax, 0  ; if final of file jump to end of loop        
    63 00000048 743E                                je end_loop
    64                                  
    65 0000004A A3[24000000]                        mov [nr_car_citite], eax      
    66                                              ; save into eax the char read
    67 0000004F BE[46000000]                        mov esi, buffer
    68 00000054 B800000000                          mov eax, 0 
    69 00000059 AC                                  lodsb
    70 0000005A 83F820                              cmp eax, ' ' 
    71                                              ; if eax is space, compare the actual number to minimum, else buil the actual number
    72 0000005D 7402                                je compare_to_min
    73 0000005F 7514                                jne build_actual_number
    74                                                  
    75                                                  compare_to_min:
    76                                                  ; check if actual number  (in edx) is smaller than minimum (ebx). if true, assign_min
    77 00000061 39D3                                    cmp ebx, edx 
    78                                                  
    79 00000063 7707                                    ja assign_min
    80 00000065 BA00000000                              mov edx, 0
    81 0000006A EBBF                                    jmp bucla
    82                                                  
    83                                                      assign_min:
    84 0000006C 89D3                                        mov ebx, edx
    85 0000006E BA00000000                                  mov edx, 0
    86 00000073 EBB6                                        jmp bucla
    87                                                  ; append last digit read to actual number in edx
    88                                                  build_actual_number:
    89 00000075 83E830                                      sub eax, '0' ; eax = last digit read
    90 00000078 89C1                                        mov ecx, eax ; save last digit read in ecx
    91 0000007A 89D0                                        mov eax, edx ; move into eax the number built until now
    92 0000007C F625[29000000]                              mul byte [ten] ; 
    93 00000082 01C8                                        add eax, ecx ;eax = number build till now * 10 + last digit read
    94 00000084 89C2                                        mov edx, eax ; save updated number in edx
    95                                                  
    96 00000086 EBA3                                jmp bucla
    97                                          
    98                                              
    99                                          
   100                                        end_loop:
   101                                              ; if last number smaller than minim, assign
   102 00000088 39D3                                cmp ebx, edx ;ebx holds min, edx holds actual number
   103                                                  
   104 0000008A 7702                                ja assign_min1
   105 0000008C EB04                                jmp cleanup
   106                                              
   107                                                  assign_min1:
   108 0000008E 89D3                                    mov ebx, edx
   109 00000090 EB00                                    jmp cleanup
   110                                                  
   111                                          cleanup:
   112                                          
   113                                          ; close file reading mode
   114 00000092 FF35[20000000]                  push dword [descriptor_fis]
   115 00000098 FF15[00000000]                  call [fclose]
   116 0000009E 83C404                          add esp, 4
   117                                  ; open file append mode
   118 000000A1 68[0A000000]                    push dword access_mode     
   119 000000A6 68[00000000]                    push dword file_name
   120 000000AB FF15[00000000]                  call [fopen]
   121 000000B1 83C408                          add esp, 4*2              
   122 000000B4 A3[0C000000]                    mov [file_descriptor], eax 
   123 000000B9 83F800                          cmp eax, 0
   124 000000BC 0F84B1000000                    je final
   125                                  ;print format for minimum in file
   126 000000C2 68[3D000000]                    push dword newline
   127 000000C7 FF35[0C000000]                  push dword [file_descriptor]
   128 000000CD FF15[00000000]                  call [fprintf]
   129 000000D3 83C408                          add esp, 4*2
   130 000000D6 58                              pop eax
   131                                          ;save minimum (ebx) into eax
   132 000000D7 89D8                            mov eax, ebx
   133 000000D9 F635[2A000000]                  div byte [hundred]
   134                                          ;get hundreds digit of minimum. if existent, print to file
   135 000000DF 88E7                            mov bh, ah
   136 000000E1 3C00                            cmp al, 0
   137 000000E3 7502                            jne print_digit_in_al1
   138 000000E5 EB1F                            jmp go_on1
   139                                          
   140                                              print_digit_in_al1:
   141                                           
   142 000000E7 0430                                    add al, '0'
   143                                  
   144 000000E9 B400                                    mov ah, 0
   145 000000EB A3[45000000]                            mov [text], eax
   146 000000F0 50                                      push eax
   147 000000F1 68[45000000]                            push dword text
   148 000000F6 FF35[0C000000]                          push dword [file_descriptor]
   149 000000FC FF15[00000000]                          call [fprintf]
   150 00000102 83C408                                  add esp, 4*2
   151 00000105 58                                      pop eax
   152                                          
   153                                          go_on1:
   154 00000106 88F8                            mov al, bh
   155 00000108 B400                            mov ah, 0
   156 0000010A F635[29000000]                  div byte [ten]
   157                                          ;get tens digit of minimum. if existent, print to file
   158 00000110 88E7                            mov bh, ah
   159 00000112 3C00                            cmp al, 0
   160 00000114 7502                            jne print_digit_in_al2
   161 00000116 EB1F                            jmp go_on2
   162                                          
   163                                              print_digit_in_al2:
   164 00000118 0430                                    add al, '0'
   165                                  
   166 0000011A B400                                    mov ah, 0
   167 0000011C A3[45000000]                            mov [text], eax
   168 00000121 50                                      push eax
   169 00000122 68[45000000]                            push dword text
   170 00000127 FF35[0C000000]                          push dword [file_descriptor]
   171 0000012D FF15[00000000]                          call [fprintf]
   172 00000133 83C408                                  add esp, 4*2
   173 00000136 58                                      pop eax    
   174                                                  
   175                                          go_on2:
   176 00000137 88F8                            mov al, bh
   177 00000139 B400                            mov ah, 0
   178 0000013B F635[28000000]                  div byte [one]
   179                                           ;get ones digit of minimum. if existent, print to file
   180 00000141 3C00                            cmp al, 0
   181 00000143 7502                            jne print_digit_in_al3
   182 00000145 EBF0                            jmp go_on2
   183                                              
   184                                              print_digit_in_al3:
   185 00000147 0430                                    add al, '0'
   186 00000149 B400                                    mov ah, 0
   187 0000014B A3[45000000]                            mov [text], eax
   188 00000150 68[45000000]                            push dword text
   189 00000155 FF35[0C000000]                          push dword [file_descriptor]
   190 0000015B FF15[00000000]                          call [fprintf]
   191 00000161 83C408                                  add esp, 4*2
   192                                                  
   193                                          ; close file append mode
   194 00000164 FF35[0C000000]                  push dword [file_descriptor]
   195 0000016A FF15[00000000]                  call [fclose]
   196 00000170 83C404                          add esp, 4
   197                                  
   198                                          
   199                                        final:  
   200                                          ; exit(0)
   201 00000173 6A00                            push    dword 0      
   202 00000175 FF15[00000000]                  call    [exit]       
