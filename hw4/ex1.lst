     1                                  ; 8. Given the words A and B, compute the byte C as follows:
     2                                  ; the bits 0-5 are the same as the bits 5-10 of A
     3                                  ; the bits 6-7 are the same as the bits 1-2 of B.
     4                                  ; Compute the doubleword D as follows:
     5                                  ; the bits 8-15 are the same as the bits of C
     6                                  ; the bits 0-7 are the same as the bits 8-15 of B
     7                                  ; the bits 24-31 are the same as the bits 0-7 of A
     8                                  ; the bits 16-23 are the same as the bits 8-15 of A.
     9                                  bits 32 ;assembling for the 32 bits architecture
    10                                  ; the start label will be the entry point in the program
    11                                  global  start 
    12                                  
    13                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    14                                  
    15                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    16                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    17                                  segment  data use32 class=data ; the data segment where the variables are declared 
    18 00000000 72D8                        a dw 1101100001110010b
    19 00000002 678E                        b dw 1000111001100111b
    20 00000004 00                          c db 0
    21 00000005 00000000                    d dd 0
    22                                  segment  code use32 class=code ; code segment
    23                                  start:
    24                                      ; create C
    25 00000000 66A1[00000000]          	mov ax, [a] ;ax = A
    26 00000006 6625E007                    and ax, 0000011111100000b ;keep in ax just bits on 5-10 of A
    27 0000000A 66C1E805                    shr ax, 5 ;shift ax bits 5 positions right
    28 0000000E 0805[04000000]              or [c], al ;5-10 of A become 0-5 of C  
    29                                      
    30 00000014 66A1[02000000]              mov ax, [b] ; ax = B
    31 0000001A 6683E006                    and ax, 0000000000000110b ;keep in ax bits 1-2 of B
    32 0000001E 66C1E005                    shl ax, 5; shift ax bits 5 positions left
    33 00000022 0805[04000000]              or [c], al ;1-2 of A become 6-7 of C 
    34                                      
    35                                      ;C done
    36                                      
    37                                      ;create D
    38 00000028 B800000000                  mov eax, 0
    39 0000002D A0[04000000]                mov al, [c] ; al = C
    40 00000032 C1E008                      shl eax, 8 ;shift eax bits 8 positions left
    41 00000035 0905[05000000]              or [d], eax ;  the bits 8-15 of D are the same as the bits of C
    42                                      
    43 0000003B B800000000                  mov eax, 0
    44 00000040 66A1[02000000]              mov ax, [b] ;ax = B
    45 00000046 662500FF                    and ax, 1111111100000000b ; keep in ax just bits 8-15 of B
    46 0000004A 66C1E808                    shr ax, 8; shift ax 8 positions to right
    47 0000004E 0905[05000000]              or [d], eax ; the bits 0-7 of D are the same as the bits 8-15 of B
    48                                      
    49 00000054 B800000000                  mov eax, 0
    50 00000059 66A1[00000000]              mov ax, [a] ; ax = A
    51 0000005F 6625FF00                    and ax, 0000000011111111b ; keep in ax only bits 0-7 of A
    52 00000063 C1E018                      shl eax, 24 ; shift eax bits 24 positions left
    53 00000066 0905[05000000]              or [d], eax ; the bits 24-31 of D are the same as the bits 0-7 of A
    54                                      
    55 0000006C B800000000                  mov eax, 0
    56 00000071 66A1[00000000]              mov ax, [a] ; ax = A
    57 00000077 662500FF                    and ax, 1111111100000000b ; keep in ax only bits 8 -15 of A
    58 0000007B C1E008                      shl eax, 8 ; shift eax 8 positions left
    59 0000007E 0905[05000000]              or [d], eax
    60                                      ;D done 
    61                                      
    62 00000084 6A00                    	push   dword 0 ;saves on stack the parameter of the function exit
    63 00000086 FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution of
