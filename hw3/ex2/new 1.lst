     1                                  ; Write a program in assembly language which computes one of the following arithmetic expressions, considering the following domains for the variables: 
     2                                  ; a - byte, b - word, c - double word, d - qword - Signed representation
     3                                  ; (a + b + c) - d + (b - c)
     4                                  bits 32 ;assembling for the 32 bits architecture
     5                                  ; the start label will be the entry point in the program
     6                                  global  start 
     7                                  
     8                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     9                                  
    10                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    11                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    12                                  segment  data use32 class=data ; the data segment where the variables are declared 
    13 00000000 0C                      	a db 12
    14 00000001 0200                    	b dw 2
    15 00000003 0F000000                	c dd 15
    16 00000007 1400000000000000        	d dq 20
    17                                  	
    18                                  segment  code use32 class=code ; code segment
    19                                  start: 
    20 00000000 A0[00000000]            	mov al, [a]
    21 00000005 6698                        cbw
    22 00000007 660305[01000000]            add ax, [b]
    23 0000000E 6699                        cwd
    24                                      
    25 00000010 668B1D[03000000]            mov bx, word [c]
    26 00000017 668B0D[05000000]            mov cx, word [c + 2]
    27                                      
    28 0000001E 6601D8                      add ax, bx
    29 00000021 6611CA                      adc dx, cx
    30                                      
    31 00000024 6652                        push dx
    32 00000026 6650                        push ax
    33 00000028 58                          pop eax
    34 00000029 99                          cdq
    35                                      
    36 0000002A 2B05[07000000]              sub eax, dword [d]
    37 00000030 1B15[0B000000]              sbb edx, dword [d + 4]
    38                                      
    39 00000036 52                          push edx
    40 00000037 50                          push eax
    41                                      
    42 00000038 66A1[01000000]              mov ax, [b]
    43 0000003E 6699                        cwd
    44 00000040 668B1D[03000000]            mov bx, word [c]
    45 00000047 668B0D[05000000]            mov cx, word [c + 2]
    46                                      
    47 0000004E 6629D8                      sub ax, bx
    48 00000051 6619CA                      sbb dx, cx
    49                                      
    50 00000054 6652                        push dx
    51 00000056 6650                        push ax
    52 00000058 5B                          pop ebx
    53 00000059 B900000000                  mov ecx, 0
    54                                      
    55 0000005E 58                          pop eax
    56 0000005F 5A                          pop edx
    57                                      
    58 00000060 01D8                        add eax, ebx
    59 00000062 11CA                        adc edx, ecx
    60                                  	
    61 00000064 6A00                    	push   dword 0 ;saves on stack the parameter of the function exit
    62 00000066 FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution of
