     1                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     2                                  ; a - byte, b - word, c - double word, d - qword - Unsigned representation
     3                                  ; ((a + b) + (a + c) + (b + c)) - d
     4                                  bits 32 ;assembling for the 32 bits architecture
     5                                  ; the start label will be the entry point in the program
     6                                  global  start 
     7                                  
     8                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     9                                  
    10                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    11                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    12                                  segment  data use32 class=data ; the data segment where the variables are declared 
    13 00000000 0A                      	a db 10
    14 00000001 1E00                    	b dw 30
    15 00000003 28000000                	c dd 40
    16 00000007 3200000000000000        	d dq 50
    17 0000000F 0000                        i dw 0
    18                                  segment  code use32 class=code ; code segment
    19                                  start: 	
    20 00000000 A0[00000000]            	mov al, [a]
    21 00000005 B400                        mov ah, 0            ; unsigned conversion al to ax
    22 00000007 660305[01000000]            add ax, [b]           ; ax = a + b
    23 0000000E 6689C3                      mov bx, ax          ; bx = ax = a + b
    24                                      
    25 00000011 A0[00000000]                mov al, [a]
    26 00000016 B400                        mov ah, 0
    27 00000018 66BA0000                    mov dx, 0               ;unsigned conversion al to ax to dx:ax = a
    28 0000001C 660305[03000000]            add ax, word [c]
    29 00000023 661315[05000000]            adc dx, word [c + 2]        ; dx:ax = a + c
    30                                      
    31 0000002A 66B90000                    mov cx, 0                   ;unsigned conversion bx to cx:bx
    32 0000002E 6601D8                      add ax, bx
    33 00000031 6611CA                      adc dx, cx                  ; dx:ax = dx:ax + cx:bx = a + b + a + c
    34                                      
    35 00000034 6652                        push dx
    36 00000036 6650                        push ax
    37                                      
    38 00000038 66A1[0F000000]              mov ax, [i]
    39 0000003E 6650                        push ax
    40 00000040 66A1[01000000]              mov ax, [b]
    41 00000046 6650                        push ax
    42 00000048 58                          pop eax                         ;eax = b
    43 00000049 BA00000000                  mov edx, 0                  ;edx:eax = b
    44                                      
    45 0000004E 8B1D[07000000]              mov ebx, dword [d]   
    46 00000054 8B0D[0B000000]              mov ecx, dword [d + 4]   ;ecx:ebx = d
    47 0000005A 01D8                        add eax, ebx
    48 0000005C 11CA                        adc edx, ecx                    ;edx:eax = edx:eax + ecx:ebx = b + d
    49                                      
    50 0000005E 5B                          pop ebx                             ; ebx = dx:ax = a + b + a + c
    51 0000005F B900000000                  mov ecx, 0                         
    52                                      
    53 00000064 01D8                        add eax, ebx
    54 00000066 11CA                        adc edx, ecx                    ;edx:eax = edx:eax + ecx:ebx = a + b + a + c + b + d
    55                                      
    56 00000068 2B05[07000000]              sub eax, dword [d]
    57 0000006E 1B15[0B000000]              sbb edx, dword [d + 4]      ;edx:eax = ((a + b) + (a + c) + (b + c)) - d
    58                                      
    59                                      
    60 00000074 6A00                    	push   dword 0 ;saves on stack the parameter of the function exit
    61 00000076 FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution of
