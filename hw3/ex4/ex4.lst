     1                                  ; Write a program in assembly language which computes one of the following arithmetic expressions, considering the following domains for the variables: 
     2                                  ; a-(7+x)/(b*b-c/d+2) - signed representation
     3                                  ; a-doubleword; b,c,d-byte; x-qword
     4                                  bits 32 ;assembling for the 32 bits architecture
     5                                  ; the start label will be the entry point in the program
     6                                  global  start 
     7                                  
     8                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     9                                  
    10                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    11                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    12                                  segment  data use32 class=data ; the data segment where the variables are declared 
    13 00000000 64000000                	a dd 100
    14 00000004 02                      	b db 2
    15 00000005 32                      	c db 50
    16 00000006 EC                      	d db -20
    17 00000007 F6FFFFFFFFFFFFFF            x dq -10
    18 0000000F 0000                        i dw 0
    19                                  	
    20                                  segment  code use32 class=code ; code segment
    21                                  start: 
    22 00000000 A1[07000000]            	mov eax, [x]
    23 00000005 8B15[0B000000]              mov edx, [x + 4]  ; edx:eax = x
    24 0000000B 50                          push eax
    25 0000000C 52                          push edx
    26 0000000D B807000000                  mov eax, 7
    27 00000012 99                          cdq
    28 00000013 59                          pop ecx,
    29 00000014 5B                          pop ebx
    30                                      
    31 00000015 01D8                        add eax, ebx
    32 00000017 11CA                        adc edx, ecx ;edx:eax = x + 7
    33                                      
    34 00000019 52                          push edx
    35 0000001A 50                          push eax
    36                                      
    37 0000001B B800000000                  mov eax, 0
    38 00000020 BA00000000                  mov edx, 0
    39                                      
    40 00000025 A0[04000000]                mov al, [b]
    41 0000002A F62D[04000000]              imul byte [b]
    42 00000030 6689C3                      mov bx, ax ; bx = b * b
    43                                      
    44 00000033 A0[05000000]                mov al, [c]
    45 00000038 6698                        cbw
    46 0000003A 8A15[06000000]              mov dl, [d]
    47 00000040 F6FA                        idiv dl ;al = c/d
    48 00000042 6698                        cbw
    49                                      
    50 00000044 6629C3                      sub bx, ax
    51 00000047 6683C302                    add bx, 2  ; bx = b * b - c/d + 2
    52                                      
    53 0000004B 66FF35[0F000000]            push word [i]
    54 00000052 6653                        push bx
    55 00000054 5B                          pop ebx
    56                                      
    57 00000055 58                          pop eax
    58 00000056 5A                          pop edx
    59 00000057 F7FB                        idiv ebx ; eax = (x + 7) /  (b * b - c/d + 2)
    60                                      
    61 00000059 8B1D[00000000]              mov ebx, [a]
    62 0000005F 29C3                        sub ebx, eax ; ebx = a-(7+x)/(b*b-c/d+2) 
    63                                  	
    64 00000061 6A00                    	push   dword 0 ;saves on stack the parameter of the function exit
    65 00000063 FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution of
