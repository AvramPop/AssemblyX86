     1                                  ; A string of doublewords is given. 
     2                                  ; Order in decreasing order the string of the low words (least significant) from these doubleword. 
     3                                  ; The high words (most significant) remain unchanged.
     4                                  ; being given
     5                                  ; sir DD 12345678h 1256ABCDh, 12AB4344h
     6                                  ; the result will be
     7                                  ; 1234ABCDh, 12565678h, 12AB4344h.
     8                                  bits 32 ;assembling for the 32 bits architecture
     9                                  ; the start label will be the entry point in the program
    10                                  global  start 
    11                                  
    12                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    13                                  
    14                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    15                                          ; msvcrt.dll contains exit, printf the other important C-runtime functions
    16                                  segment  data use32 class=data ; the data segment where the variables are declared 
    17 00000000 78563412CDAB561244-         sir dd 12345678h, 1256ABCDh,12AB4344h
    17 00000009 43AB12             
    18 0000000C 03                          len db ($ - sir) / 4
    19                                  
    20                                  segment  code use32 class=code ; code segment
    21                                  start:
    22 00000000 BE[00000000]                mov ESI, sir
    23 00000005 BB00000000                  mov EBX, 0 ; i = EBX
    24 0000000A BA00000000                  mov EDX, 0 ; j = EDX
    25 0000000F 8B0D[0C000000]              mov ECX, [len]
    26                                      
    27                                      outer_for: ; for EBX = 0; EBX < len - 1; EBX++
    28 00000015 83E901                          sub ECX, 1
    29 00000018 39CB                            cmp EBX, ECX
    30 0000001A 7202                            jb outer_for_loop ; compare i to len - 1
    31 0000001C EB44                            jmp finish ; if outer for done
    32                                          
    33                                              outer_for_loop:
    34 0000001E 83C101                                  add ECX, 1 ; substracted and re added 1 to len so that i can be compared to len - 1
    35 00000021 83C301                                  add EBX, 1
    36 00000024 89DA                                    mov EDX, EBX
    37 00000026 83EB01                                  sub EBX, 1
    38                                                  
    39                                                  inner_for: ; for EDX = EBX + 1; EDX < len; EDX++
    40 00000029 39CA                                        cmp EDX, ECX
    41 0000002B 7202                                        jb inner_for_loop
    42 0000002D EB2E                                        jmp go_on_outer_for ; if outer for is done
    43                                                      
    44                                                          inner_for_loop:
    45 0000002F 668B049D[00000000]                                  mov ax, [sir + EBX * 4]  ; ax = the lower word of sir[EBX]
    46 00000037 51                                                  push ECX
    47 00000038 668B0C95[00000000]                                  mov cx, [sir + EDX * 4]  ; cx = the lower word of sir[EDX]
    48                                  
    49 00000040 6639C8                                              cmp ax, cx
    50 00000043 7202                                                jb interchange
    51 00000045 EB10                                                jmp go_on_inner_for
    52                                                              
    53                                                                  interchange:
    54                                                                      ;interchange lower words of sir[EBX] and sir[EDX]
    55 00000047 66890495[00000000]                                          mov word [sir + EDX * 4], ax
    56 0000004F 66890C9D[00000000]                                          mov word [sir + EBX * 4], cx
    57                                                              go_on_inner_for:
    58 00000057 59                                                      pop ECX
    59 00000058 83C201                                                  add EDX, 1
    60 0000005B EBCC                                                    jmp inner_for
    61                                                              
    62                                              go_on_outer_for:
    63 0000005D 83C301                                  add EBX, 1
    64 00000060 EBB3                                    jmp outer_for
    65                                                  
    66                                      finish:
    67                                          
    68                                      
    69 00000062 6A00                    	push dword 0 ;saves on stack the parameter of the function exit
    70 00000064 FF15[00000000]          	call [exit] ; function exit is called in order to end the execution of
